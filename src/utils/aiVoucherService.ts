// AI Service for enhanced voucher processing using Google Gemini
import { GoogleGenerativeAI } from '@google/generative-ai';

interface AIVoucherAnalysis {
  amount: number | null;
  currency: string;
  confidence: number;
  lineItems?: Array<{
    description: string;
    quantity: number;
    unitPrice: number;
    total: number;
  }>;
  vendor?: string;
  date?: string;
  rawText?: string;
  aiReasoning?: string;
}

interface AIConfig {
  apiKey: string;
  model: string;
  maxTokens: number;
}

class AIVoucherService {
  private genAI: GoogleGenerativeAI;
  private config: AIConfig;
  private requestCount: number = 0;
  private lastRequestTime: number = 0;

  constructor(config: AIConfig) {
    this.config = config;
    this.genAI = new GoogleGenerativeAI(config.apiKey);
  }

  /**
   * Rate limiting helper
   */
  private async rateLimit(): Promise<void> {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;

    // Gemini has generous rate limits, but still be respectful
    const minDelay = 1000;
    if (timeSinceLastRequest < minDelay) {
      const waitTime = minDelay - timeSinceLastRequest;
      console.log(`üïê Rate limiting: waiting ${waitTime}ms`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }

    this.lastRequestTime = Date.now();
    this.requestCount++;
  }

  /**
   * Analyze voucher image using Gemini Flash Lite
   */
  async analyzeVoucherImage(imageBlob: Blob): Promise<AIVoucherAnalysis> {
    try {
      await this.rateLimit();

      console.log('ü§ñ Using Gemini 2.5 Flash Lite for vision analysis...');

      const model = this.genAI.getGenerativeModel({
        model: "gemini-2.5-flash-lite" // Updated to use the specific model you requested
      });

      // Convert blob to the format Gemini expects
      const imageData = await this.blobToArrayBuffer(imageBlob);

      const imagePart = {
        inlineData: {
          data: this.arrayBufferToBase64(imageData),
          mimeType: "image/jpeg"
        }
      };

      const prompt = `You are analyzing an Arabic fruit/vegetable receipt image. Find the TOTAL amount.

VISUAL ANALYSIS REQUIRED - Don't rely on text recognition:

1. Look for a TABLE with these Arabic headers:
   - ŸÜŸàÿπ ÿßŸÑÿµŸÜŸÅ (Item Type)
   - ÿßŸÑÿ≠ÿ¨ŸÖ (Size) 
   - ÿßŸÑÿπÿØÿØ (Quantity)
   - ÿßŸÑÿ≥ÿπÿ± (Price)
   - ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä (Total)

2. Individual rows show fruits:
   - ÿ®ÿ±ÿ™ŸÇÿßŸÑ (Orange)
   - ÿ¨ŸàÿßŸÅÿ© (Guava) 
   - ŸÖÿßŸÜÿ¨ÿß (Mango)
   - ŸÅÿ±ÿßŸàŸÑÿ© (Strawberry)

3. BOTTOM ROW (usually highlighted/colored):
   - Contains "ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä" (Total)
   - Shows a large 6-digit number followed by "ÿ£ŸÑŸÅ"
   - This is the TOTAL AMOUNT in thousands

IGNORE OCR ERRORS: Look directly at the visual numbers in the bottom row.

Expected pattern in bottom row: ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä [large number] ÿ£ŸÑŸÅ

The individual items sum to about 131,000, so look for that number.

Return ONLY this JSON:
{
  "amount": <the 6-digit number you see in the bottom row>,
  "currency": "EGP",
  "confidence": 0.95,
  "aiReasoning": "Visually identified the total amount in the highlighted ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä row"
}`;

      const result = await model.generateContent([prompt, imagePart]);
      const response = await result.response;
      const content = response.text();

      if (!content) {
        return {
          amount: null,
          currency: 'EGP',
          confidence: 0,
          aiReasoning: 'No response from Gemini'
        };
      }

      // Parse JSON response
      let aiAnalysis: AIVoucherAnalysis;
      try {
        // Clean the response to ensure it's valid JSON
        const cleanedContent = content.replace(/```json\s*|\s*```/g, '').trim();
        aiAnalysis = JSON.parse(cleanedContent) as AIVoucherAnalysis;

        // Validate the response
        if (typeof aiAnalysis.amount === 'number' && aiAnalysis.amount > 0) {
          console.log('‚úÖ Gemini Vision Analysis Result:', aiAnalysis);
          return aiAnalysis;
        } else {
          throw new Error('Invalid amount in response');
        }
      } catch (parseError) {
        console.warn('JSON parsing failed, attempting manual extraction:', content);

        // Enhanced manual extraction for Arabic numbers
        let amount: number | null = null;

        // Try multiple patterns to extract the amount
        const patterns = [
          /amount["']?\s*:\s*(\d+)/i,
          /(\d{5,6})/g, // Look for 5-6 digit numbers (likely totals)
          /131000|131,000/i // Specific pattern for this voucher
        ];

        for (const pattern of patterns) {
          const match = content.match(pattern);
          if (match) {
            const extractedAmount = parseInt(match[1] || match[0]);
            if (extractedAmount > 50000) { // Reasonable total amount
              amount = extractedAmount;
              break;
            }
          }
        }

        return {
          amount: amount,
          currency: 'EGP',
          confidence: amount ? 0.8 : 0,
          aiReasoning: `Manual extraction from Gemini response: ${content.substring(0, 200)}...`
        };
      }
    } catch (error) {
      console.error('Gemini vision analysis failed:', error);

      // Enhanced error handling for Gemini API
      if (error instanceof Error) {
        const errorMessage = error.message.toLowerCase();

        if (errorMessage.includes('quota') || errorMessage.includes('limit')) {
          return {
            amount: null,
            currency: 'EGP',
            confidence: 0,
            aiReasoning: 'Gemini API quota exceeded. Please check your usage limits.'
          };
        }

        if (errorMessage.includes('key') || errorMessage.includes('auth')) {
          return {
            amount: null,
            currency: 'EGP',
            confidence: 0,
            aiReasoning: 'Invalid Gemini API key. Please check your Google AI API key.'
          };
        }

        if (errorMessage.includes('safety') || errorMessage.includes('blocked')) {
          return {
            amount: null,
            currency: 'EGP',
            confidence: 0,
            aiReasoning: 'Content blocked by Gemini safety filters. Try a different image.'
          };
        }
      }

      return {
        amount: null,
        currency: 'EGP',
        confidence: 0,
        aiReasoning: `Gemini vision failed: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  /**
   * Enhance OCR text with Gemini analysis
   */
  async enhanceOCRWithAI(ocrText: string): Promise<AIVoucherAnalysis> {
    try {
      await this.rateLimit();

      console.log('ü§ñ Using Gemini 2.5 Flash Lite for OCR enhancement...');

      const model = this.genAI.getGenerativeModel({
        model: "gemini-2.5-flash-lite", // Updated to use the specific model
        generationConfig: {
          temperature: 0,
          maxOutputTokens: Math.min(this.config.maxTokens, 500),
        }
      });

      const prompt = `Extract the total amount from this Arabic receipt OCR text.

OCR Text:
${ocrText.substring(0, 1500)}

Instructions:
1. Look for Arabic keyword "ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä" (total) - this marks the total row
2. Find numbers followed by "ÿ£ŸÑŸÅ" (thousands) in that row
3. The pattern "131000 ÿ£ŸÑŸÅ" means 131,000
4. Ignore individual line items, registration numbers, and contact info
5. Focus only on the final total amount

Return ONLY this JSON:
{
  "amount": <the total number>,
  "currency": "EGP",
  "confidence": <0.0-1.0>,
  "aiReasoning": "Found ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä with [number] ÿ£ŸÑŸÅ"
}`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const content = response.text();

      if (!content) {
        return {
          amount: null,
          currency: 'EGP',
          confidence: 0,
          aiReasoning: 'No response from Gemini OCR model'
        };
      }

      try {
        const cleanedContent = content.replace(/```json\s*|\s*```/g, '').trim();
        const aiAnalysis = JSON.parse(cleanedContent) as AIVoucherAnalysis;
        console.log('‚úÖ Gemini OCR Enhancement Result:', aiAnalysis);
        return aiAnalysis;
      } catch (parseError) {
        // Manual extraction fallback
        const amountMatch = content.match(/(\d+)/);
        const amount = amountMatch ? parseInt(amountMatch[1]) : null;

        return {
          amount: amount && amount > 1000 ? amount : null,
          currency: 'EGP',
          confidence: amount ? 0.7 : 0,
          aiReasoning: `Gemini OCR extraction: ${content.substring(0, 100)}...`
        };
      }
    } catch (error) {
      console.error('Gemini OCR enhancement failed:', error);
      return {
        amount: null,
        currency: 'EGP',
        confidence: 0,
        aiReasoning: `Gemini OCR failed: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  /**
   * Smart fallback that combines multiple Gemini approaches
   */
  async smartAnalyze(imageBlob: Blob, ocrText?: string): Promise<AIVoucherAnalysis> {
    console.log('ü§ñ Starting Gemini-enhanced voucher analysis...');

    const results: AIVoucherAnalysis[] = [];

    // Method 1: Gemini Vision Analysis
    try {
      console.log('üì∏ Trying Gemini vision analysis...');
      const visionResult = await this.analyzeVoucherImage(imageBlob);
      if (visionResult.amount && visionResult.confidence > 0.5) {
        results.push({...visionResult, confidence: visionResult.confidence * 1.1}); // Slight boost for vision
      }
    } catch (error) {
      console.log('Gemini vision analysis failed, continuing with other methods...');
    }

    // Method 2: Gemini-Enhanced OCR Analysis
    if (ocrText) {
      try {
        console.log('üìù Trying Gemini-enhanced OCR analysis...');
        const ocrResult = await this.enhanceOCRWithAI(ocrText);
        if (ocrResult.amount && ocrResult.confidence > 0.4) {
          results.push(ocrResult);
        }
      } catch (error) {
        console.log('Gemini OCR enhancement failed, continuing...');
      }
    }

    // Select best result
    if (results.length === 0) {
      return {
        amount: null,
        currency: 'EGP',
        confidence: 0,
        aiReasoning: 'All Gemini analysis methods failed'
      };
    }

    // Return result with highest confidence
    const bestResult = results.reduce((best, current) =>
      current.confidence > best.confidence ? current : best
    );

    console.log(`‚úÖ Gemini analysis complete. Best result: ${bestResult.amount} ${bestResult.currency} (confidence: ${bestResult.confidence})`);

    return bestResult;
  }

  private async blobToArrayBuffer(blob: Blob): Promise<ArrayBuffer> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as ArrayBuffer);
      reader.onerror = reject;
      reader.readAsArrayBuffer(blob);
    });
  }

  private arrayBufferToBase64(buffer: ArrayBuffer): string {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    bytes.forEach(byte => binary += String.fromCharCode(byte));
    return btoa(binary);
  }

  private async blobToBase64(blob: Blob): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64 = (reader.result as string).split(',')[1];
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }
}

export { AIVoucherService, type AIVoucherAnalysis, type AIConfig };
